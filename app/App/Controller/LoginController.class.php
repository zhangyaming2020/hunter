<?phpnamespace App\Controller;use Think\HxCommon;class LoginController extends ApiController {	//公共方法	public function _initialize(){          parent::_initialize();		  $this->withdraw = D('Withdraw');         //提现表          $this->_mod     = D('Member');//用户表          $this->_ord     = D('Address');//订单表          $this->_comment= D('item_comment');//评论表          $this->Account  =  D('AccountLog');//  账单记录表          $this->card     = D('Card');  //银行卡表          $this->place    =D('Place'); //开放地区表          $this->recharge    =D('Member_recharge'); //开放地区表        $this->merchant=D('Merchant');//店铺表        $this->order_list=D('OrderList');//订单商品        $this->item=D('Item');//商品表        $this->gwc=D('Gwc');//购物车表         $this->sms=D('Sms');//验证码        $this->hx_common =new HxCommon(C('hx_params'));    }    //修改登陆密码    public function updatepwd($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        ($data == NULL || count($data) <= 0) && $this->print_error_status('params_error', $datas['pack_no']);      //  echo st_md5($data['type']);exit;        $uid = $data['user_id'];        $type = $data['type'];        $member = D('Member');        $res = $member->where(array('id' => $uid))->find(); //验证老密码是否正确        if ($type == 1) {//修改登录密码            (!$oldpwd = check_pwd($data['password'])) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'password'));            (!$newpwd = check_pwd($data['newpassword'])) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'newpassword'));            (!$cnewpwd = check_pwd($data['renewpassword'])) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'renewpassword'));            //检查两次新密码是否一致            ($newpwd != $cnewpwd) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'pwd'));            //检查旧密码是否正确            $oldpwd = st_md5($oldpwd);            $newpwd = st_md5($newpwd);            if ($oldpwd !== $res['password']) {                $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'oldpwd'));            }            //开户事务            $this->_mod->startTrans();            //修改支付密码            $res2 =  $this->_mod->where(array('id' => $uid))->setField('password', $newpwd); //修改密码            if ($res2) {                //进行环信修改密码                $result = $this->hx_common->resetPassword($uid,$newpwd);                if ($result) {                    $this->_mod->commit();                    $this->json_Response('success', $datas['pack_no']);                } else {                    $this->_mod->rollback();                    $this->json_Response('failed', $datas['pack_no']);                }            }        } elseif ($type == 2) {            (!$oldpwd = check_pwd($data['password'])) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'password'));            (!$newpwd = check_pwd($data['newpassword'])) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'newpassword'));            (!$cnewpwd = check_pwd($data['renewpassword'])) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'renewpassword'));            //检查两次新密码是否一致            ($newpwd != $cnewpwd) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'pwd'));            //检查旧密码是否正确            $oldpwd = st_md5($oldpwd);            $newpwd = st_md5($newpwd);            if ($oldpwd !== $res['pay_pwd']) {                $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'oldpwd'));            }            //修改密码            $res2 = $member->where(array('id' => $uid))->setField('pay_pwd', $newpwd); //修改密码            if($res2){                $this->json_Response('success',$datas['pack_no']);            }else{                $this->json_Response('failed',$datas['pack_no']);            }        }    }	//设置支付密码	public function set_pwd($datas){				$this->check_user_id($datas);		$data = $this->get_datas($datas);		($data == NULL || count($data)<=0) && $this->print_error_status('params_error',$datas['pack_no']);        $uid = $data['user_id'];		(!$oldpwd = check_paypwd($data['pay_pwd'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'pay_pwd'));		(!$cnewpwd = check_paypwd($data['repay_pwd'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'repay_pwd'));		//检查两次新密码是否一致		($oldpwd != $cnewpwd) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Password_Not_Consistent' => 'pwd'));		//检查旧密码是否正确		$oldpwd = st_md5($oldpwd);		        $member=D('Member');		//修改密码		$res2 =  $member->where(array('id'=>$uid))->setField('pay_pwd',$oldpwd); //设置支付密码		  		if($res2){			$this->json_Response('success',$datas['pack_no']);		}else{			$this->json_Response('failed',$datas['pack_no']);		}	}	//忘记支付密码    public function forget_pay_pwd($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid = $datas['user_id'];        (!$mobile = check_mobile($data['mobile']))&& $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'mobile'));//手机号码格式错误        (!$code = $data['code']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'code'));//请填写验证码        (!$pay_pwd = check_paypwd($data['pay_pwd'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'pay_pwd'));        (!$repay_pwd = check_paypwd($data['repay_pwd'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'repay_pwd'));        $st_pay_pwd= st_md5($pay_pwd);        $yz_code=$this->sms->where(array('mobile'=>$mobile))->order('create_time desc')->field('code')->select();        $yz_code1=$yz_code[0]['code'];        if($code!==$yz_code1){            $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'code_err'));//验证码错误        }        $old_pay_pwd=$this->_mod->where(array('id'=>$uid))->getField('pay_pwd');        if($st_pay_pwd==$old_pay_pwd){            $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'old_pay_pwd'));//不能与原来的支付密码一致        }        //检查两次新密码是否一致        ($pay_pwd != $repay_pwd) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'error_repay_pwd'));        $res=$this->_mod->where(array('id'=>$uid))->setField('pay_pwd',$st_pay_pwd); //设置支付密码        if($res){            $this->json_Response('success',$datas['pack_no']);        }else{            $this->json_Response('failed',$datas['pack_no']);        }    }	//选择设置还是修改	 public function changepwd($datas){	        $this->check_user_id($datas);		$data = $this->get_datas($datas);		($data == NULL || count($data)<=0) && $this->print_error_status('params_error',$datas['pack_no']);		$uid = $data['user_id'];		 $member=D('Member');        $res =  $member->check($uid);        		if($res){		    $this->json_Response('success',$datas['pack_no'],array('type' => 1));//已有密码		}else{			$this->json_Response('success',$datas['pack_no'],array('type' => 0));//没有密码		}      }		//忘记密码//  public function forgetpwd($datas){//  //		$data = $this->get_datas($datas);//	    ($data == NULL || count($data)<=0) && $this->print_error_status('params_error',$datas['pack_no']);//		//		(!$mobile = check_mobile($data['mobile'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'mobile'));	//		//		(!$code = $data['code']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'code'));//			//		(!$password = check_pwd($data['password'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'password'));//		(!$repassword = check_pwd($data['repassword'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'password'));//      ($password != $repassword) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Password_Not_Consistent' => '$pwd'));//     //       $yz_code=cookie('code');//      if($code!==$yz_code){//          $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'code_err'));//验证码错误//      }////		(!check_code($mobile,$code)) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'code_error'));//      if(false !== D('Member')->where(array('mobile'=>$mobile))->save(array('password'=>st_md5($password))) && false !== M('Sms')->where(array('mobile' => $mobile , 'code' => $code))->delete()){//          $this->json_Response('success',$datas['pack_no']);//      }else{//          $this->json_Response('faild',$datas['pack_no']);//      }////	}    //添加收藏    public function add_collection($datas){	     $this->check_user_id($datas);		 $data = $this->get_datas($datas);		 $uid = $datas['user_id']; //用户id//		 $list =  D('Member')->get_shouye($uid);//		 if($list['type'] == 1){//		     $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'type')); //商家不可以收藏 //		 }		 $arr = array();		 $arr['uid'] = $uid;//收藏人		 $arr['add_time'] = time();		 $arr['type'] = $data['type'];				 $type=$data['type'];		 //验证是否已经收藏		 $collection = D('Collection');		 if($type==1){		 	     $arr['pid'] = $data['id']; //店铺id		 	   		 	     $check_collection = $collection->check_collection($uid,$arr['pid']);		 }elseif($type==2){		 	       $arr['item_id'] = $data['id']; //店铺id		 	        		 	      $check_collection = $collection->check_itemcollection($uid,$arr['item_id']);		 }				 if(!$check_collection){ 		 				 $res = $collection->add_collection($arr);		     if($res){		     	$this->json_Response('success',$datas['pack_no']);		     }else{		     	$this->json_Response('failed',$datas['pack_no']);		     }							 						 }else{		     $this->json_Response('failed',$datas['pack_no'],array('ERROR_Param_Format' => 'pid_error'));//已经收藏		 } 	     	}       //获取商品评价信息	public function get_evaluate($datas){				//$this->check_user_id($datas);	    $data = $this->get_datas($datas);//dump($data);exit;		$uid = $datas['user_id'];		$page = $data['page'];        $pagesize = $data['pagesize'];		$itemComment = D('ItemComment');		$type=$data['type'];		if($type==1){			    (!$pid = $data['id']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'item_id'));  //商品id//			    $count = D('Evaluate')->where(array('pid'=>$pid))->count();//              $Page = new \Think\Page_App($count,$pagesize,$page);			    $list =$itemComment->evaluate($pid,$page,$pagesize,$type);//dump($list);exit;		}elseif($type==2){			    (!$item_id = $data['id']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'item_id'));  //商品id//			     $count = $itemComment->where(array('item_id'=>$item_id))->count();//              $Page = new \Think\Page_App($count,$pagesize,$page);			     $list = $itemComment->get_evaluate($item_id,$page,$pagesize,$type);		}	    $this->json_Response('success',$datas['pack_no'],array('list' => $list));	}    //我的订单	public function myorder($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        ($data == NULL || count($data)<=0) && $this->print_error_status('params_error',$datas['pack_no']);        //$data['user_id']=9844;        $uid =$data['user_id'];        $page = $data['page'];        $pagesize = $data['pagesize'];        //dump($data);exit;        $listorder=D('Address');//      $count = $listorder->where(array('uid'=>$uid))->count();//      $Page = new \Think\Page_App($count,$pagesize,$page);        $type=$data['type'];        //状态  0=待支付, 1=已支付(待收货)(支付既配送中) ,2=已确认收货(待评价),3= 作废,4=已发货(待收货),6=已评价,7=退款单        if($type==4){         	//待评价        	 $list = $listorder->orders($uid,$page,$pagesize,$type);        }elseif($type==1){        	//待收货        	 $list = $listorder->orders($uid,$page,$pagesize,$type);        }elseif($type==5){        	//退换货        	 $list = $listorder->orders($uid,$page,$pagesize,$type);        }elseif($type==2){        	//待发货        	$list = $listorder->orders($uid,$page,$pagesize,$type);        }elseif($type==3){        	//待付款        	$list = $listorder->orders($uid,$page,$pagesize,$type);        }elseif($type==0){        	//全部订单        	 $list = $listorder->orderss($uid,$page,$pagesize);        }//dump($list);exit;        $this->json_Response('success',$datas['pack_no'],array('list'=>$list));    }    //改变订单状态    public function change_status($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid =$datas['user_id'];        (!$oid = $data['oid']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'oid'));  //订单id不能为空        (!$type = $data['type']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'type'));        $order_info=$this->_ord ->where(array('id'=>$oid))->field('dingdan,status,addtime,tuikuan_status')->find();        $dingdan =$order_info['dingdan'];        $status=(int)$order_info['status'];        $tuikuan_status=(int)$order_info['tuikuan_status'];        if($type==1){//确认收货            if($status==4){               $result= $this->_ord ->where(array('dingdan'=>$dingdan,'uid'=>$uid))->setField('status',2);            }else{                $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'err_status4'));//不是已发货(待收货)订单            }            if($result){                $this->json_Response('success',$datas['pack_no']);            }else{                $this->json_Response('failed',$datas['pack_no']);            }        }elseif ($type==2){//商品评论            if($status!==2){                $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'err_status2'));//不是已发货(待收货)订单            }            (!$commot['degrees']= $data['degrees']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'degrees'));  //请输入星            (!$commot['memos'] = $data['memos']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'memos'));  //请写评论语            (!$item_id = $data['item_id']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'item_id'));  //商品id不能为空            $commot['type']=2;//商品评论            $commot['oid']=$dingdan;            $commot['uid']=$uid;            $commot['add_time']=time();            $commot['item_id']=$item_id;            $this->_comment->startTrans();            $result1=$this->_comment->add($commot);//增加评论            if($result1){                $item= $this->item->where(array('id'=>$item_id))->field('xingji,comments')->find();                $new_xing=((double)$data['degrees']+(double)$item['xingji'])/2;                $arr['xingji']=round($new_xing);                $arr['comments']+=1;                $this->item->startTrans();                $result_item=$this->item->where(array('id'=>$item_id))->save($arr);                if($result_item){                    $result=$this->_ord ->where(array('dingdan'=>$dingdan,'uid'=>$uid))->setField('status',6);                    $set_commit_id=$this->order_list->where(array('oid'=>$oid,'uid'=>$uid,'jid'=>$item_id))->setField('commit_id',$result1);                    if($result&&$set_commit_id){                        $this->item->commit();                        $this->_comment->commit();                        $this->json_Response('success',$datas['pack_no']);                    }else{                        $this->item->rollback();                        $this->_comment->rollback();                        $this->json_Response('failed',$datas['pack_no']);                    }                }else{                    $this->item->rollback();                    $this->_comment->rollback();                    $this->json_Response('failed',$datas['pack_no']);                }            }else{               $this->json_Response('failed',$datas['pack_no']);            }        }else if($type==3){//删除订单            if($status==0||$status==6||$status==2||($tuikuan_status==2&&$status==7)){                $result= $this->_ord ->where(array('dingdan'=>$dingdan,'uid'=>$uid))->setField('status',3);            }else{                $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'err_status'));//此订单状态不能删除            }            if($result){                $this->json_Response('success',$datas['pack_no']);            }else{                $this->json_Response('failed',$datas['pack_no']);            }        }else if($type==3){//删除订单            if($status==0||$status==6){                $result= $this->_ord ->where(array('dingdan'=>$dingdan,'uid'=>$uid))->setField('status',3);            }else{                $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'err_status'));//此订单状态不能删除            }            if($result){                $this->json_Response('success',$datas['pack_no']);            }else{                $this->json_Response('failed',$datas['pack_no']);            }        }else if($type==4){//去评论            if($status==6||$status==2){                $list=$this->order_list->where(array('oid'=>$oid,'uid'=>$uid))->field('jid,title,img,commit_id')->select();                $this->json_Response('success',$datas['pack_no'],array('list'=>$list,'dingdan'=>$dingdan,'time'=>$order_info['addtime']));            }else{                $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Empty' => 'err_status6'));//此订单状态不是已评价            }       }    }    //去支付    public function go_pay($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid =$datas['user_id'];        (!$oid = $data['oid']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'oid'));//订单id        $balance=$this->_mod->where(array('id'=>$uid))->field('prices,give_redpacket')->find();        $order= $this->_ord ->where(array('id'=>$oid,'uid'=>$uid))->field('totalprices,dingdan')->find();        /*if($totalprices==null){            $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'not_status1'));        }*/        $this->json_Response('success',$datas['pack_no'],array('totalprices'=>$order['totalprices'],'dingdan'=>$order['dingdan'],'prices'=>$balance['prices'],'give_redpacket'=>$balance['give_redpacket']));    }	//我的收藏   public function mycollection($datas){        $this->check_user_id($datas);	    $data = $this->get_datas($datas);		$uid = $datas['user_id'];		$coll = D('Collection');		 $page = $data['page'];        $pagesize = $data['pagesize'];		$type=$data['type'];		if($type==1){			    $list = $coll->get_all_collection($uid,$page,$pagesize);					}elseif($type==2){			    $list = $coll->get_collection($uid,$page,$pagesize);			  		}				$this->json_Response('success',$datas['pack_no'],$list);   }      //删除收藏   public function del_collection($datas){          $this->check_user_id($datas);	   $data = $this->get_datas($datas);	   $uid = $datas['user_id'];	  (!$id = $data['id']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'id'));//未选择操作对象 //收藏记录的id  删除单条 传一个id  多条删除 传数组  	  	   $coll = D('Collection');	  	   $type=$data['type'];	   	   if($type==1){	   	   	   	    $list = $coll->delete_contition($id,$uid);	   	    file_put_contents("text.txt", var_export($notify,true)."\r\n",FILE_APPEND);	   }elseif($type==2){	   		   	     $list = $coll->del_contition($id,$uid);	   	   }	  	   $this->json_Response('success',$datas['pack_no']);   }    //取消收藏    public function delete_collection($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid =$datas['user_id']; //用户id//		 $list = $this->mod_user->get_shouye($uid);//		 if($list['type'] == 1){//		     $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'type')); //商家不可以收藏//		 }        $arr['type'] = $data['type'];        $type=$data['type'];        //验证是否已经收藏        $collection = D('Collection');        if($type==1){//店铺收藏            $arr = $data['id']; //店铺id            $check_collection = $collection->check_collection($uid,$arr);        }elseif($type==2){//商品收藏            $arr = $data['id']; //店铺id            $check_collection = $collection->check_itemcollection($uid,$arr);        }        if($check_collection){            $delect_c = $collection->del_c($uid,$check_collection);//取消收藏            if($delect_c)                $this->json_Response('success',$datas['pack_no']);            else                $this->json_Response('failed',$datas['pack_no']);        }else{            $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'collection')); //车辆没有被收藏        }    }    //订单详情    public function order_details($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid = $datas['user_id'];        (!$oid = $data['oid']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'oid'));//订单id        $order=D('Address');        $list = $order->where(array('uid'=>$uid,'id'=>$oid))->field('merchant_id,aid,dingdan,addtime,status,totalprices,memos,tuikuan_status')->find();        $list['item_info'] = M('OrderList')->where(array('uid'=>$uid,'oid'=>$oid))->field('prices,nums,title')->select();        $list['count']=count($list['item_info']);        $list['member'] = M('MemberGoodsaddress')->where(array('uid'=>$uid,'id'=>$list['aid']))->field('shperson,mobile,province,city,area,address')->find();        $list['merchant_name'] = M('merchant')->where(array('id'=>$list['merchant_id']))->getField('title');        $this->json_Response('success',$datas['pack_no'],array('list'=>$list));    }    //商品详情    public function item_details($datas){         $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid = $datas['user_id'];        (!$id = $data['id']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'id'));//商品id        $itemComment=D('ItemComment');         $type=$data['type'];       if($type==1){   	    $item=D('Merchant');          $item_img=D('Merchant_img'); 	                                   $list = $item->where(array('id'=>$id))->find();        $list['imgs'] = $item_img->where(array('pid'=>$id))->select();        $list['collection'] = D('Collection')->where(array('pid'=>$id,'uid'=>$uid))->getField('status');        $count =$itemComment->where(array('merchant_id'=>$id))->count();        }elseif($type==2){// 商品详情	      $item=D('Item');  	      $item_img=D('Item_img'); 	             	      $list = $item->where(array('id'=>$id))->find();	      $list['imgs'] = $item_img->where(array('item_id'=>$id))->select();	      $list['collection'] = D('Collection')->where(array('item_id'=>$id))->getField('status');	      $count = $itemComment->where(array('item_id'=>$id))->count();         $check_gwc=$this->gwc->where(array('member_id'=>$uid,'merchant_id'=>0,'item_id'=>$id))->find();           if($check_gwc){               $list['exist_gwc']=1;//已加入购物车           }else{               $list['exist_gwc']=0;//未加入购物车           }       }      // dump($list);exit;        $this->json_Response('success',$datas['pack_no'],array('totalcounts' => $count,'list'=>$list));    }    //个人页面	public function member($datas){	    $this->check_user_id($datas);		$data = $this->get_datas($datas);        $bonus=C('pin_cardinal');       // $datas['user_id']=9844;		$uid = $datas['user_id'];		$list =$this->_mod->where(array('id'=>$uid))->field('all_give_redpacket,give_redpacket,consume_redpacket,mobile,types,is_zhsh,avatar,nickname,gender,bare,goods_prices,achievement,prices')->find();       		$list['head']  = D('merchant')->where(array('member_id'=>$uid))->field('id,title,logo,office_starthours,office_endhours,office_startday,office_endday,tel,member_id,withdraw_charge')->find();        $red_right = floor($list['consume_redpacket']/C('pin_cardinal')) - floor($list['all_give_redpacket']/C('pin_cardinal')) ;        $list['bonus']=$red_right<0 ?0:$red_right;       // $list2=($list['consume_redpacket']-$list['all_give_redpacket'])/$bonus;		//$aa=sprintf("%.2f", $list2);		//$list['bonus']=round($aa, 0);     		//$list['card']  = D('Card')->where(array('user_id'=>$uid))->count();        $count_num=$this->_mod->where(array('id'=>$uid))->getField('accountno');        if($count_num==0||$count_num==null||$count_num=="") {            $list['card']=0;        }else{            $list['card']=1;        }        //dump($list);exit;		$this->json_Response('success',$datas['pack_no'],array('list' => $list));	}	 //自营账单记录	public function record($datas){			    $this->check_user_id($datas);		$data = $this->get_datas($datas);		$uid = $datas['user_id'];		$page = $data['page'];        $pagesize = $data['pagesize'];		$list = $this->_ord ->record($uid,$page,$pagesize);        $this->json_Response('success',$datas['pack_no'],array('list' => $list));	}    //客服    public function get_mobile($datas){        $list = C('pin_tel');        $this->json_Response('success', $datas['pack_no'],array('list'=>$list));    }    //版本号和版本说明    public function version($datas){        $list = array();        $list['version_number'] = C('pin_site_name');//版本号        $list['release_notes'] = C('pin_area');//版本说明        $this->json_Response('success', $datas['pack_no'],array('list'=>$list));    }    //金豆支付    public function pay_packet($datas){       $this->check_user_id($datas);	   $data = $this->get_datas($datas);	   $uid  = $datas['user_id'];		(!$mobile=$data['mobile']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'mobile'));//商品id		(!$money=strval($data['give_redpacket'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'redpacket'));//商品id		$a= $this->_mod->where(array('id'=>$uid))->field('mobile,give_redpacket,pay_pwd')->find();		$c= $this->_mod->where(array('mobile'=>$mobile))->field('id,mobile,types,goods_prices,give_redpacket')->find();        if($c['id'] == $uid){            $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'is_self'));//不能给自己转金豆        }		if($c == ""){			$this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'mobile2'));//此账号不存在		}		if($money > $a['give_redpacket']){			       $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'give_redpacket'));//金豆余额不足		}		(!$oldpwd = check_paypwd($data['pay_pwd'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'pay'));        $newpwd = st_md5($oldpwd);        if($newpwd != $a['pay_pwd']){			$this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'pay_pwd'));//支付密码错误		}        $where['give_redpacket'] = $a['give_redpacket']-$money;        if($c['types'] == 2){//商家为货款            $date['goods_prices'] = $c['goods_prices']+$money;        }else{//用户为金豆            $date['give_redpacket'] = $c['give_redpacket']+$money;        }        M()->startTrans();        $b = $this->_mod->where(array('id'=>$uid))->save($where);        $f = $this->_mod->where(array('mobile'=>$mobile))->save($date);        $self_account['uid']=$uid;        $self_account['iiuv']=$c['mobile'];        $self_account['red_packet']=-$money;        $self_account['create_time']=time();        $self_account['change_desc']="金豆转账：转到".$c['mobile'];        $self_account['change_type']=31;        $other_account['uid']=$c['id'];        $other_account['iiuv']=$a['mobile'];        if($c['types'] == 2){//商家为货款            /*$other_account['goods_prices']=$money;            $other_account['all_give_redpacket']=$money;*/            $other_account['red_packet'] = $money;        }else{//用户为金豆            $other_account['red_packet'] = $money;//            $other_account['give_redpacket']=$money;        }        $other_account['create_time']=time();        $other_account['change_desc']="金豆转账：".$a['mobile']." 转进";        $other_account['change_type']=31;        if($f&&$b){            $self=$this->Account->add($self_account);            $other=$this->Account->add($other_account);            if(false !== $other && false !== $self){                M()->commit();                $this->json_Response('success',$datas['pack_no'],array('list' => $a));            }else{                M()->rollback();                $this->json_Response('failed',$datas['pack_no']);            }        }else{            M()->rollback();            $this->json_Response('failed',$datas['pack_no']);        }    }    //转账明细    public function pay_list($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        //$datas['user_id']=9837;        $uid  = $datas['user_id'];        $page = $data['page'];        $pagesize = $data['pagesize'];        $count = M('Merchant')->where(array('uid'=>$uid,'change_type'=>31))->count();        $Page = new \Think\Page_App($count,$pagesize,$page);        $list= $this->Account->where(array('uid'=>$uid,'change_type'=>31))->limit($Page->firstRow.','.$Page->listRows)->field('iiuv,red_packet,create_time')->order('create_time desc')->select();        foreach ($list as $k=>$v){            $v['red_packet']=(double)$v['red_packet'];            if($v['red_packet']>0){                $list[$k]['red_packet']=(String)"+".$v['red_packet'];            }        }        if($list){            $this->json_Response('success',$datas['pack_no'],array('list' => $list));        }else{            $this->json_Response('success',$datas['pack_no'],array('list' => null));        }    }      //可用金豆    public function packet($datas){       $this->check_user_id($datas);	   $data = $this->get_datas($datas);	   $uid  = $datas['user_id'];	         //$list=C('pin_share_cardinal');      // $b=$this->_mod->where(array('id'=>$uid))->field('bare,give_redpacket')->find();      // if($b['bare']>=$list){//            $a['bare']=$b['bare']-$list;//            $a['give_redpacket']=$b['give_redpacket']+$list;//            $c=$this->_mod->where(array('id'=>$uid))->save($a);       // }        $list1=$this->_mod->where(array('id'=>$uid))->field('give_redpacket,bare,all_give_redpacket,goods_prices,prices')->find();        $list1['pricesto_redpacket'] = C('pin_pricesto_redpacket');        $list1['share_red'] = C('pin_share_red');        $this->json_Response('success',$datas['pack_no'],array('list' =>$list1));    }      //金豆转余额，    public function give_packet($datas){       $this->check_user_id($datas);	   $data = $this->get_datas($datas);	   $uid  =$datas['user_id'];       $member=D('Member');       (!$packet=$data['packet']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'packet'));//金豆数量不能为空       $a=$member->where(array('id'=>$uid))->field('give_redpacket,prices,pay_pwd,consume_redpacket')->find();       if($packet>$a['give_redpacket']){       	        $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'give_redpacket'));//金豆余额不足       }       $list=strval($packet-($packet*0.16));    //实际兑换余额            (!$pay_pwd = check_paypwd($data['pay_pwd'])) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'pwd'));       $newpwd = st_md5($pay_pwd);        if($newpwd!=$a['pay_pwd']){			$this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'pay_pwd'));//支付密码错误		}	   $where['give_redpacket']=$a['give_redpacket']-strval($packet);    //金豆余额	   $where['prices']=$a['prices']+$list;    //商家余额	   $where['consume_redpacket']=$a['consume_redpacket']+strval($packet);    //累计消费金豆	       $b=$member->where(array('id'=>$uid))->save($where);      if($b){        	    $this->json_Response('success',$datas['pack_no'],array('list' =>$a['give_redpacket'],'list2'=>$list));        }    }     //分类    public function class_ify($datas){    	$data = $this->get_datas($datas);//dump($data);exit        //先获取定位信息    	(!$city=$data['city']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'city'));//金豆数量不能为空    	//在获取分类信息    	$class=$data['class'];    	$place=D('Place');    	$merchant=D('Merchant');    	$merch=D('Merchant_cate');    	$page = $data['page'];        $pagesize = $data['pagesize'];    	//市    	$date['name']=array('like','%'.$city.'%');    	$list=$place->where($date)->getfield('id');    	//区    	$list3=$place->where(array('pid'=>$list))->field('name')->select();    	$list3['fujin']='附近';        if($class!==null&&$class!==""&&$class!==NULL){            $where['name']  = array('like','%'.$class.'%');            $where['pid']   = 0;            $a = $merch->where($where)->getfield('id');            $b = $merch->field('id')->where('spid LIKE \''.$a.'|%\'')->select();            $list1 = implode(',',array_column($b,'id'));            $list1 .= empty($list1) ? $a : ','.$a;        }        $area=$data['area'];    	$lat=(String)$data['latitude'];	    $lng=(String)$data['longitude'];    	$distance=$data['distance']*1000;		 if(($area=="附近"&&$distance=="全城")||$area==""){		 		//不选地区，距离最近	        $condition['status']=4;//营业中	        $condition['city_id']=(int)$list;             if($list1!==null){                 $condition['cate_id'] = array('in',$list1);             }		    $count = $merchant->where($condition)->count();	        $Page = new \Think\Page_App($count,$pagesize,$page);	        $aa=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)	                       ->field('id,title,logo,xing,address,tel,longitude,latitude,cate_id')->select();	        foreach ($aa as $k=>$v){                  $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                  $aa[$k]['distance']=sprintf("%.2f", intval($distancess)/1000);            }    		$type=$data['type'];    		if($type==1){    			//销量排序		        $aa=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)		                       ->field('id,title,logo,xing,address,tel,longitude,latitude')		                       ->order("sales desc")->select();		        foreach ($aa as $k=>$v){                  $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                  $aa[$k]['distance']= sprintf("%.2f", intval($distancess)/1000);                }    		}elseif($type==2){    			//好评排序		        $aa=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)    			               ->field('id,title,logo,xing,address,tel,longitude,latitude')->order("xing desc")->select();               		    foreach ($aa as $k=>$v){                  $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                  $aa[$k]['distance']= sprintf("%.2f", intval($distancess)/1000);                }    		}elseif($type==3){    			//距离最近		        $aa= M('Merchant')->where($condition)->limit($Page->firstRow.','.$Page->listRows)		                            ->field('id,title,logo,xing,address,tel,longitude,latitude')->select();                foreach ($aa as $k=>$v){                  $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                  $aa[$k]['distance']= sprintf("%.2f", intval($distancess)/1000);                }               $aa=$this->array_sort($aa, distance, $type = 'asc');    		}    	}else{    		if($distance=="" ){            				//各区的店铺				$list4=$place->where(array('name'=>$area))->getfield('id');		        $condition['status']=4;//营业中		        $condition['city_id']=$list;		        $condition['cate_id']=$list1;		        $condition['district_id']=$list4;		        $count = $merchant->where($condition)->count();	            $Page = new \Think\Page_App($count,$pagesize,$page);		        $aa=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)				                ->field('id,title,logo,xing,address,tel,longitude,latitude')->order("id desc")->select();                		        foreach ($aa as $k=>$v){                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                      $aa[$k]['distance']= sprintf("%.2f", intval($distancess)/1000);                }                 file_put_contents("text.txt", var_export($aa,true)."\r\n",FILE_APPEND);				$type=$data['type'];				if($type==1){			        $aa=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)						                ->field('id,title,logo,xing,address,tel,longitude,latitude')->order("sales desc")->select();				    foreach ($aa as $k=>$v){                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                      $aa[$k]['distance']=sprintf("%.2f", intval($distancess)/1000);                    }   				}elseif($type==2){			        $aa=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)					                 ->field('id,title,logo,xing,address,tel,longitude,latitude')->order("xing desc")->select();				    foreach ($aa as $k=>$v){                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                      $aa[$k]['distance']=sprintf("%.2f", intval($distancess)/1000);                    }				}elseif($type==3){    			//距离最近		         $aa= $merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)		                        ->field('id,title,logo,xing,address,tel,longitude,latitude')->select();                 foreach ($aa as $k=>$v){                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                      $aa[$k]['distance']=sprintf("%.2f", intval($distancess)/1000);                 }                 $aa=$this->array_sort($aa, distance, $type = 'asc');    		    }			}else{     				//距离最近，根据附近距离查找所有店铺				$array = getAround($lat, $lng, $distance);		        $condition['status']=4;   //营业中		        $condition['latitude']  = array(array('EGT',$array['minLat']),array('ELT',$array['maxLat']),'and');//(`latitude` >= minLat) AND (`latitude` <=maxLat)		        $condition['longitude'] = array(array('EGT',$array['minLng']),array('ELT',$array['maxLng']),'and');//(`longitude` >= minLng) AND (`longitude` <= maxLng)		        $condition['city_id']=$list;		        $condition['cate_id']=$list1;//		        $count = $merchant->where($condition)->count();////	            $Page = new \Think\Page_App($count,$pagesize,$page);		        $like=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)		                       ->field('id,title,logo,xing,address,tel,longitude,latitude')->select();                             		        foreach ($like as $k=>$v){	                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                                                      	    $like[$k]['distance']= sprintf("%.2f", intval($distancess)/1000);                          	                      	                                                if($distancess>$distance){                     	     unset($like[$k]);                          }                                                    $aa=array();                          foreach($like  as $k=>$v){                          	  $bb=array();      	                      $bb=$v;      	                      $aa[]=$bb;                          }                         	                }	             	                	          	            		        $type=$data['type'];				if($type==1){			        $like=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)			                       ->field('id,title,logo,xing,address,tel,longitude,latitude')->order("sales desc")->select();			        foreach ($like as $k=>$v){	                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);	                      $like[$k]['distance']= sprintf("%.2f", intval($distancess)/1000);                           if($distancess>$distance){                     	     unset($like[$k]);                          }	                      $aa=array();                          foreach($like  as $k=>$v){                          	  $bb=array();      	                      $bb=$v;      	                      $aa[]=$bb;                          }	                }				}elseif($type==2){			        $like=$merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)			                       ->field('id,title,logo,xing,address,tel,longitude,latitude')->order("xing desc")->select();					foreach ($like as $k=>$v){	                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);	                      $like[$k]['distance']=sprintf("%.2f", intval($distancess)/1000);                           if($distancess>$distance){                     	         unset($like[$k]);                           }                     $aa=array();                          foreach($like  as $k=>$v){                          	  $bb=array();      	                      $bb=$v;      	                      $aa[]=$bb;                          }	                }  				}elseif($type==3){    			//距离最近			    $array = getAround($lat, $lng, $distance);		        $like= $merchant->where($condition)->limit($Page->firstRow.','.$Page->listRows)		                        ->field('id,title,logo,xing,address,tel,longitude,latitude')->select();    		     foreach ($like as $k=>$v){                      $distancess=getdistance($lng,$lat,$v['longitude'],$v['latitude']);                      $like[$k]['distance']= sprintf("%.2f", intval($distancess)/1000);                     if($distancess>$distance){                     	unset($like[$k]);                     }                     $aa=array();                          foreach($like  as $k=>$v){                          	  $bb=array();      	                      $bb=$v;      	                      $aa[]=$bb;                          }	            }	           $aa=$this->array_sort($aa, distance, $type = 'asc');    		}    	    }    	}	//dump($aa);exit;    	  $this->json_Response('success',$datas['pack_no'],array('list'=>$aa,'count'=>$count));	    	              }         public function distance($datas){               	$data = $this->get_datas($datas);    	//先获取定位信息    	(!$city=$data['city']) && $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'city'));//金豆数量不能为空    	//在获取分类信息    	//市    	$date['name']=array('like','%'.$city.'%');    	$list= $this->place ->where($date)->find();    	    	//区    	$list3= $this->place ->where(array('pid'=>$list['id']))->field('name')->select();            $list4=array();         $list4[]=array('name'=>'附近');         foreach($list3 as $key=>$val){      	$bb=array();      	$bb['name']=$val['name'];      	      	$list4[]=$bb;      }                     	 $this->json_Response('success',$datas['pack_no'],array('list4'=>$list4));     }          function array_sort($arr, $keys, $type = 'desc') {             $keysvalue = $new_array = array();        foreach ($arr as $k => $v) {            $keysvalue[$k] = $v[$keys];        }        if ($type == 'asc') {            asort($keysvalue);        } else {            arsort($keysvalue);        }        reset($keysvalue);        foreach ($keysvalue as $k => $v) {            $new_array[] = $arr[$k];        }               return $new_array;    }     //根据两点求距离    function getdistance($lng,$lat,$lng2,$lat2){        //将角度转为狐度        $radLat1=deg2rad($lat);//deg2rad()函数将角度转换为弧度        $radLat2=deg2rad($lat2);        $radLng1=deg2rad($lng);        $radLng2=deg2rad($lng2);        $a=$radLat1-$radLat2;        $b=$radLng1-$radLng2;        $s=2*asin(sqrt(pow(sin($a/2),2)+cos($radLat1)*cos($radLat2)*pow(sin($b/2),2)))*6378.137*1000;        return $s;    }    /**     * @param  $latitude    纬度     * @param  $longitude    经度     * @param  $raidus        半径范围(单位：米)     * @return multitype:number     */     public function getAround($latitude,$longitude,$raidus){             $PI = 3.14159265;        $degree = (24901*1609)/360.0;        $dpmLat = 1/$degree;        $radiusLat = $dpmLat*$raidus;        $minLat = (float)$latitude - $radiusLat;        $maxLat = (float)$latitude + $radiusLat;        $mpdLng = $degree*cos($latitude * ($PI/180));        $dpmLng = 1 / $mpdLng;        $radiusLng = $dpmLng*$raidus;        $minLng = (float)$longitude - $radiusLng;        $maxLng = (float)$longitude + $radiusLng;        return array (minLat=>$minLat, maxLat=>$maxLat, minLng=>$minLng, maxLng=>$maxLng);    }           //提现    public function withdraw($datas){        $this->check_user_id($datas);//验证是否登录        $data = $this->get_datas($datas);//获取数据        ($data == null || count($data) <=0 ) && $this->print_error_status('params_error',$datas['pack_no']);        //$data['user_id']=9837;        $uid  =$data['user_id'];//获取用户id        (!$money = $data['money']) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'money'));//提现金额不能小于30或不能为空        $pwd = $data['pay_pwd'];        $type=$data['type'];        $remark=$data['remark'];        $pay_pwd = st_md5($pwd);       // $arr =$this->card->validation_catd($id,$uid);        $results =$this->_mod->get_info($uid);//      $money = (int)$money * 10;        if ($results['accountno']==0||$results['accountno']==null||$results['accountno']==""){            $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'accountno_error'));//没有添加银行卡        }        if ($results['prices'] < $money){        	$this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'price_error'));//您余额不足请不能进行提现        }        if ($results['pay_pwd']!= $pay_pwd){        	$this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'pay_pwd'));//支付密码错误        }        $timess=time();        $team=date('ymd',$timess);        $code =$team.rand(1000000000,9999999999);//订单号        if(!$this->withdraw->validation_user($uid)){//判断用户是否有其他的在提现            $this->withdraw->startTrans();            $information = array(                'create_time'=> time(),                'bank_account'   => $results['accountno'],                'member_id'       => $uid,                'type'     => $type,                'amount'     => $money,                'remark'=>$remark,                'branch'=>$results['bankname'],                'uname'=>$results['realname'],                'order_no'=>$code,            );            $map['prices'] = array('exp','prices-'.$money);            $save = $this->_mod->set_user($uid,$map);            $add = $this->withdraw->add_withdraw($information);            if($add && $save){//修改用户表的余额和向提现表中添加数据                $this->withdraw->commit();                $this->json_Response('success', $datas['pack_no']);            } else {                $this->withdraw->rollback();                $this->json_Response('params_error', $datas['pack_no']);            }        }else{            $this->json_Response('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'status_error'));//在审核中不能进行提现        }    }    //去评价    public function evaluate($datas){       $this->check_user_id($datas);	   $data = $this->get_datas($datas);	   $uid  = $data['user_id'];	   //赠送金豆记录的id和订单ID	   $id=$data['id'];	   $type=$data['type'];        if($type==1){//店铺评论        	  $list=$this->Account->where(array('id'=>$id))->find();        	  $list4= $this->merchant->where(array('id'=>$list['merchant_id']))->find();        	  if($list['comment_id']){   	                 $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'list')); //已经评论               }else{                     $arr['memos']=$data['memos'];		   	          $arr['degrees']=$data['degrees'];		   	          $arr['add_time']=time();		   	          $arr['uid']=$list['uid'];		   	          $arr['merchant_id']=$list['merchant_id'];		   	          $arr['type']=$type;		   	          $list2=$this->_comment->add($arr);//添加店铺评论		   	          $list3=$this->Account->where(array('id'=>$id))->setfield('comment_id',$list2);                  $merchant_xing=$this->merchant->where(array('id'=>$list['merchant_id']))->getField('xing');                  $new_xing=((double)$data['degrees']+(double)$merchant_xing)/2;                  $xing=round($new_xing);                  $aa=$this->merchant->where(array('id'=>$list['merchant_id']))->setField('xing',$xing);               }        }elseif($type==2){//商品评论        	  $item_id=$data['item_id'];        	  $list1=$this->_comment->where(array('oid'=>$id,'item_id'=>$item_id))->find();        	        	  if($list1){   	                 $this->print_error_status('params_error',$datas['pack_no'],array('ERROR_Param_Format' => 'list')); //已经评论               }else{                     $arr['memos']=$data['memos'];		   	          $arr['degrees']=$data['degrees'];		   	          $arr['oid']=$id;		   	          $arr['add_time']=time();		   	          $arr['item_id']=$item_id;		   	          $arr['type']=$type;		   	          $list2=$this->_comment->add($arr);               }	    }                  $this->json_Response('success',$datas['pack_no']);    }    //提现记录    public function incarnate($datas){        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid  = $datas['user_id'];		   $page = $data['page'];           $pagesize = $data['pagesize'];		   $type=$data['type'];		   if($type==1){		   	     $count =$this->withdraw->where(array('member_id'=>$uid))->count();                 $Page = new \Think\Page_App($count,$pagesize,$page);		   	     $list=$this->withdraw->where(array('member_id'=>$uid))->limit($Page->firstRow.','.$Page->listRows)->field('amount,create_time')->order('create_time desc')->select();				   foreach($list as $item){					$temp = $item;					$list2 = $this->_mod-> where(array('id'=>$uid))->find();					$temp['mobile'] = $list2['mobile'];					$arr[] = $temp;				    }		   }elseif($type==2){		   	     $count =$this->recharge ->where(array('uid'=>$uid,'status'=>1))->count();                 $Page = new \Think\Page_App($count,$pagesize,$page);                 $arr=$this->recharge ->where(array('uid'=>$uid,'status'=>1))->limit($Page->firstRow.','.$Page->listRows)->field('totalprices,addtime')->order('addtime desc')->select();				     		   }		   $this->json_Response('success',$datas['pack_no'],array('arr' => $arr));		      }    //金豆使用限制    public function red_envelope_to_limit($datas)    {        $uid  = $datas['user_id'];        $price_type = 0;        if ($uid){            $price = $this->_mod->where('id='.$uid)->getField('consume_redpacket');            (int)C('pin_use_red') <= $price && $price_type = 1;        }        $this->json_Response('success',$datas['pack_no'],array('type'=>$price_type));    }    //android版本号    public function android($datas)    {        $this->json_Response('success',$datas['pack_no'],C('pin_android'));    }        //商家添加订单    public function front_add_order($datas)    {        $this->json_Response('success',$datas['pack_no'],C('pin_service_charge'));    }    //商家添加订单验证用户    public function user_add_order($datas)    {        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid  = $datas['user_id'];        $user = M('member')-> where(array('mobile'=> $data['mobile']))->field('id,prices,give_redpacket,realname')->find() ;  //买家        empty($user) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'mobile'));//没有改用户        ($uid == $user['id']) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'oneself'));//不能我自己添加订单        $this->json_Response('success',$datas['pack_no'],$user);    }    //商家添加订单    public function add_order($datas)    {        $this->check_user_id($datas);        $data = $this->get_datas($datas);        $uid  = $datas['user_id'];        (!$mobile = $data['mobile']) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'mobile'));//手机号不能为空        (!$service_charge = $data['service_charge']) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'service_charge'));//金额不能为空        $member = M('Member');        $user = $member->where(array('mobile'=>$mobile))->field('id,prices')->find() ;  //买家        $prices = $member->where('id = '.$uid)->getField('prices');        ($prices < $service_charge) && $this->print_error_status('params_error', $datas['pack_no'], array('ERROR_Param_Format' => 'not_sufficient_funds'));//商家余额不足        //生成订单        $arr['merchant_id']         = $data['merchant_id'];//店铺id        $arr['dingdan']             = make_order_id();        $arr['uid']                 = $user['id'] ;        $arr['type']                = 2 ;        $arr['status']              = 2 ;        $arr['pay_time']            = time() ;        $arr['addtime']             = time() ;        $arr['totalprices']         = $data['totalprices'];        $arr['cash_prices']         = $data['totalprices'];        $arr['service_charge']      = $service_charge;        $rs = M('Address')->add($arr);        if ($rs){            $data1['oid']       = $rs ;            $data1['uid']       = $uid ;//            $data1['jid']       = $data['jid'] ;//            $data1['nums']      = $data['nums'] ;//            $data1['title']     = $data['title'] ;            $rs1 = D('OrderList')->add($data1);            if ($rs1){                //商家扣除服务费                ($service_charge) &&$data3['prices']=array('exp','prices-'.$service_charge);                if($data3){                    M('Member')->where(array('id'=>$uid))->data($data3)->save();  //商家                }                $data4['uid']               = $uid;  //商家ID                $data4['oid']               = $rs ;                $data4['prices']            = $data['totalprices'];                $data4['goods_prices']      = $data['totalprices'];                $data4['service_charge']    = '-'. $service_charge;                $data4['change_desc']       = '商家报单：'.$arr['dingdan'];                $data4['change_type']       = 23 ;                $data4['create_time']       = time() ;                $s_res = $this->merchant->where('member_id = '.$uid)->setInc('sales');                if (false !== $s_res && M('account_log')->add($data4)){                    $this->json_Response('success',$datas['pack_no']);                }else{                    $this->json_Response('params_error', $datas['pack_no']);                }            }        }else{            $this->json_Response('params_error', $datas['pack_no']);        }    }        //获取微信支付配置    public function wx_configuration($datas)    {        $wx = array();        $wx['app_id'] = C('pin_wx_appid');        $wx['app_secret'] = C('pin_wx_app_secret');        $this->json_Response('success',$datas['pack_no'],$wx);    }}